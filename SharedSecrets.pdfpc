[font_size]
18
[notes]
### 1

<!--- Let me start with a question: -->

### 2

What are shared secrets?
They are basically all the secret things you, your team and your servers have to know.
And most modern web applications integrate with different services one way or another.
Could be some databases, other web services, or third-party APIs.
Often enough, you either need credentials, some token or a certificate to establish a trusted connection to these services.

Handling such secrets in a working team and during deployments can be a challenging and sometimes even intimidating task.
We want to explore some directly applicable techniques that can help us to simplify this.

There are several approaches to handling secrets in an application.
The oldest one being:
simply having constants in your source code.

### 3

While this immediately solves the problem of keeping secret information in sync between your team members, it can not be considered a secure option.
First of all, everyone who gets access to the source code will also be able to read your secrets.
Furthermore, stuff like key-rotation can become tedious, since you would have to change, commit and deploy your actual source code to do so.
And besides that, it becomes hard to deploy the same code to more than one location (e.g. staging and production).

An evolved alternative to this could be the storage of secrets in configuration files which are not checked into version control:

### 4

This solves at least the pending issue of having clear text secrets in source code -- but it generates new challenges.
First of all, synchronization does not come for free anymore.
If you change the mentioned password your team members and your deployed services need to know.
This means, you need a way to distribute this secret file onto your servers and to everyone who will actually deploy.
Besides that, you have an unencrypted file on the file system of your server which again contains all your precious secrets.

To completely eradicate files for reading secrets one can make use of environment variables (see \[12factor app\]\[12factor_env\]):

### 5

An approach like this will keep clear text secrets away from your committed source code and away from the file system of your deployments.
In addition to this, it gives you configurable deploys.
This means that you are able to deploy your code to as many environments as you want.

But it still leaves you the burden of finding a way to securely set these values during deployment and distribute them among your team.

All three approaches seem like a trade-off.
You have to decide between the ability to synchronize secrets after rotating them, and the safety of their storage.

### 6

This means we need some kind of synchronized shared password store that is encrypted and can be decrypted by every team-member individually.
Of course, without the need for one well-known shared password.
So before diving into a concrete example, let's have a look at some possible tools to support our needs.

### 7

GPG (GNU Privacy Guard) is an implementation of a PKI (Public Key Infrastructure).
You may already have heard of it in the context of email encryption.
If you create a GPG certificate it will contain correlating public and private keys -- also referred to as "asymmetric crypto".
In addition, such a certificate will contain a unique GPG ID that can be used to refer to it.
Everything that gets encrypted with that public key can only be decrypted by using the corresponding private key.

This means, you can share your public key with peers so that they are enabled to send you secret information that no one can decrypt without your (securely stored and password protected) private key.

GPG embodies more features, like for example digital signatures, which are luckily not relevant for the following examples.

If you want to get started with GPG there is a good beginner tutorial online. I have a collection of useful links to this talk, which I will share with you on the last slide.

### 8

The password manager pass on the other hand is a neat little utility that basically comprises a convenient wrapper around GPG.
It allows to encrypt secret information with either one or several public GPG keys at the same time.
This enables more than one person to decrypt contained secrets simultaniously.

All secrets that are added to pass are stored encrypted inside of a single directory in flat files.
This directory can easily be shared using a version control system.

We will use this utility in our example application to establish an encrypted pool of secret information without relying on shared secrets like a well-known password.

`pass` itself is actually quite easy to acquire.
You can simply install it using your favourite package manager:

### 9

So let's build an example application to illustrate how to use pass and GPG for sharing secrets.### 10

We want to build a status page that interactively displays some statistics about a certain github user.
To do so, the username and an access token is needed.
These are the shared secrets we will have to take care of.

Everything will be hosted on a Platform as a Service hoster to simplify and streamline as much of the infrastructure as possible.
P.a.a.S. basically means that you won't have to manage bare metal servers or virtual machines.
Instead, deployment occurs on an application basis.
Scaling, load balancing and stuff like e.g. database integration is taken care of by the hoster.
One of the simplest PaaS hoster I know is heroku.

The links I will share by the end of the Talk will also contain an excellent tutorial on how to get started with heroku.

### 11

The actual server endpoint is located in the `index.js` file and build on top of `express.js`.
`express` is a pretty common JavaScript http server framework.

The app itself does not have a real implementation of an API call, as you can see.

More importantly, the app is configured using three environment variables.

The first one is the port, defaulted to 5000, on which the server should listen. Heroku will set set the PORT environment variable for every application it starts. This is more or less the only contract your heroku app has to fulfil.

The other two variables are the github credentials used to authenticate against the github API.

Heroku itself deploys using git.

To trigger the deployment simply push to the heroku origin created during setup of the application:

### 12

In principle, this is all you have to do to get the application up an running.
But since we are referring to two environment variables for our credentials (`GITHUB_USER` and `GITHUB_API_TOKEN`) that have never been configured on heroku, the app will never start. Instead it will just be trapped in an endless crash loop.


Luckily, the heroku CLI tool allows us to explicitly set environment variables for an application by a simple subcommand:
### 13

Executing this command will set the given environment variables for the application persistently and restart the app immediately.

Now, the application is running, properly configured.

This approach is taking us into a good direction.
It removes hard-coded secrets from any files, be it source code or configuration.

But still, to execute this configuration command, I need to manually type all needed secrets into my terminal.
And that is true for every person that should be able to deploy.
Our challenge is not completely solved, yet.

So we need a way to retrieve these secret information automatically.
Let's use `pass`
to build a secret store.

### 14


As mentioned before,
`pass` mainly operates on a single directory which we will call the secret store.
To initialize such a store you have to set its path in form of an environment variable and then simply initialize it by calling `pass`.
We will initialize the store with my personal GPG ID only to further simplify the example:

### 15

As mentioned, first we define which directory should be the secret store.

Secondly, we define, which GPG IDs should be able to decrypt secrets out of the secret store.

Lastly, we call `pass init` which will initialize the directory to function as a new secret store.

From now on, every secret that is added to this store can be decrypted by the given GPG ID.

Now adding such secrets to the store is even simpler.

`pass` provides an `add` command that can read from stdin:

### 16
Add will ask on the commandline, twice.

After adding it to the secret store one can easily decrypt it as long as the GPG certificate of the given ID is yours.

To do so just utilize
`pass show`.
This command will print the decrypted secret on `stdout` for easy usage and scriptability.

### 17

So far we achieved having a password store that is living in a single directory and based on flat files that can be shared using version control.
The `~/Code/myapp/secrets` dir now looks like this:

### 18

The `*.gpg` files contain the encrypted secrets that had been added previously.

<-- next slide -->

The `.gpg_id` file contains the list of GPG IDs that are used to encrypt the contents of the store.
It is even possible to use different `.gpg_id` files for different subdirectories.
This feature can enable different access policies per directory (e.g. certain secrets are only readable by a part of the team).

Of course, you don't have to use a tool like `find`
to display the content of such a secret store.
You can simply call
`pass ls` for that:

### 19

The previously seen `heroku config:set` call

### 20

can now be combined with `pass show` to enable deployment, without explicitly typing production secrets.

### 21

So far, we have accomplished a secret store only accessible for a single person.
But the goal was to be able to share secrets inside the team.
That means, we are not done yet!

### 22

\#\# Working with a Team

The example above operated only with one GPG ID.
This is useful for a personal project without an actual team.
When working with teams we usually talk about two different points in time that have -- beside other implications -- an impact on security:
**Roll On** and **Roll Off**

### 23

\#\# Handling 'Roll On' of a new Team Member

Rolling On means that an additional person joins the trusted circle of team members.
This involves in general granting certain privileges to that person like access to project secrets and/or infrastructure.
It is a good thing to have a Roll On Security Checklist on your project to handle such a scenario.
Nevertheless, when a person joins, beside other tasks, access to secrets needs to be ensured.
`pass` makes this no effort at all.


Just get the new members GPG ID and Public Key and call init again with all IDs including the new one.
Everything will be re-encrypted accordingly:

### 24

On account of the secret store access this is all there is to be done.
This procedure can be repeated every time a new member joins.
Note, that you need to have the GPG public key in your local GPG key ring in order to be able to encrypt with 

This means, you have to make sure, that every member of your team is in possession of every public key that is used inside your team.

Besides reencrypting, this command will also add the used GPG IDs to the .gpg_id file.
### 25
### 26

\#\# Handling 'Roll Off' of a leaving Team Member

Leaving the team on the other hand generates more work.
Changing access to the secret store is easy.
Just call `init` again but leave out the GPG ID of the leaving member this time.

### 27
### 28

But this won't make the secrets used up until now magically unknown to the leaving person.
The only assurance you get is that the left member won't be able to decrypt secrets from now on should they get a hold of the secret store directory.
The history of the secret store -- meaning: all previously encrypted secrets -- will still be decryptable for them.

This implies that the change of secret information (like passwords or API tokens) should be a dedicated step on your Roll Off Checklist.

But since you can keep your secrets in one dedicated place, rotating them after a Roll Off becomes less of a challenge.

### 29

### 30

\#\# Conclusion

We have built an encrypted secret store in a single directory.
This directory can be distributed amongst your team members like regular source code, e.g. by checking it into version control.
This will even give us a versioned secret store.
Because of the nature of pass, the process of people joining or leaving the team becomes as streamlined as possible, without compromising security.